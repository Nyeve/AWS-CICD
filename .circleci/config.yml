version: 2.1

orbs:
  kubernetes: circleci/kubernetes@0.12.0
  aws-cli: circleci/aws-cli@2.0
  aws-eks: circleci/aws-eks@0.2.3

jobs:
  build-app:
    docker:
      - image: circleci/node:16.13.0
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            # Your code here
            sudo npm i
            npm run build
      - save_cache:
          key: frontend-build
          paths: [node_modules]
  
  lint-app:
    docker:
      - image: circleci/node:16.13.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          key: frontend-build
      # Your job code here
      - run:
          name: lint app
          command: |
            # Your code here
            npm run lint
  lint-docker:
    docker:
      - image: python:3.7.3-stretch
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          key: frontend-build
      # Your job code here
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            hadolint ./Dockerfile
  test-app:
    docker:
      - image: circleci/node:16.13.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          key: frontend-build
      # Your job code here
      - run:
          name: test frontend
          command: |
            # Your code here
            npm run test:coverage

  push-app-to-docker:
    machine: true
    steps:
      - checkout
      - run:
          name: Build docker container
          command: |
                docker login --username ${DOCKER_USR} --password ${DOCKER_PWD}
                docker build -t awscicd:latest .
                docker images ls
                docker tag awscicd ${DOCKER_USR}/awscicd:latest
                docker push ${DOCKER_USR}/awscicd:latest

  deploy-to-ECR:
    machine: true
    steps:
      - checkout
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            sudo apt-get install unzip -y
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

      - run:
          name: Update Docker Image in ECS
          command: |
            echo "Pre-Build Steps:"
            echo "authenticating with AWS ECR..."
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 756437418345.dkr.ecr.us-east-1.amazonaws.com
<<<<<<< HEAD
            docker build -t 756437418345.dkr.ecr.us-east-1.amazonaws.com/awscicd:latest .
            
            echo "Post-Build Steps:"
            echo "pushing image to AWS ECR..."
            docker push 756437418345.dkr.ecr.us-east-1.amazonaws.com/awscicd:latest

            echo "updating AWS ECS service..."               
=======

            echo "Build Steps:"
            echo "building image..."
            docker build -t 756437418345.dkr.ecr.us-east-1.amazonaws.com/awscicd:latest .
            #docker build -t devopscapstone .
            
            echo "Post-Build Steps:"
            echo "pushing image to AWS ECR..."
            docker tag awscicd:latest 756437418345.dkr.ecr.us-east-1.amazonaws.com/awscicd:latest
            docker push 756437418345.dkr.ecr.us-east-1.amazonaws.com/awscicd:latest

            echo "updating AWS ECS service..."
>>>>>>> c91832aabce26800abd58954f881f74f2c7f1e86
            aws ecs update-service --cluster awscicd-cluster --service react-sv --force-new-deployment --no-cli-pager
            echo "Done!"


workflows:
  default:
    jobs:
      - build-app
      - lint-app:
          requires: [build-app]
      - lint-docker:
          requires: [build-app]
      - test-app:
          requires: [build-app]
      - push-app-to-docker:
          requires: [test-app,lint-docker,lint-app]
          filters:
            branches:
              only: [main]
      - deploy-to-ECR:
          requires: [push-app-to-docker]