version: 2.1

orbs:
  kubernetes: circleci/kubernetes@0.12.0
  aws-cli: circleci/aws-cli@2.0
  aws-eks: circleci/aws-eks@0.2.3

jobs:
  build-app:
    docker:
      - image: circleci/node:16.13.0
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            # Your code here
            sudo npm i
            npm run build
      - save_cache:
          key: frontend-build
          paths: [node_modules]
  
  lint-app:
    docker:
      - image: circleci/node:16.13.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          key: frontend-build
      # Your job code here
      - run:
          name: lint app
          command: |
            # Your code here
            npm run lint
  lint-docker:
    docker:
      - image: python:3.7.3-stretch
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          key: frontend-build
      # Your job code here
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            hadolint ./Dockerfile
  test-app:
    docker:
      - image: circleci/node:16.13.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          key: frontend-build
      # Your job code here
      - run:
          name: test frontend
          command: |
            # Your code here
            npm run test:coverage

  push-app-to-docker:
    machine: true
    steps:
      - checkout
      - run:
          name: Build docker container
          command: |
                docker login --username ${DOCKER_USR} --password ${DOCKER_PWD}
                docker build -t capstone:latest .
                docker images ls
                
                docker tag capstone:latest ${DOCKER_USR}/capstone:latest
                docker push ${DOCKER_USR}/capstone:latest

  #deploy-to-ECR:
   # machine: true
    #steps:
     # - checkout
      #- run:
        #  name: Install AWS CLI dependencies
        #  working_directory: /tmp
        #  command: |
         #   sudo apt-get update && sudo apt-get install -yy less
          #  sudo apt-get install unzip -y
           # curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            #unzip awscliv2.zip
            #sudo ./aws/install
            #aws --version


      #- run:
          #name: Update Docker Image in ECS
          #command: |
            #echo "Pre-Build Steps:"
            #echo "authenticating with AWS ECR..."
            #aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 756437418345.dkr.ecr.us-east-1.amazonaws.com
            #echo "Build Steps:"
            #echo "building image..."
            #docker build -t 756437418345.dkr.ecr.us-east-1.amazonaws.com/capstone .

            #create ecr repo
            #aws ecr repository --repository-name awscicd/capstone
            #echo "Post-Build Steps:"
            #echo "pushing image to AWS ECR..."
            #docker tag capstone:latest 756437418345.dkr.ecr.us-east-1.amazonaws.com/capstone:latest
            #docker push 756437418345.dkr.ecr.us-east-1.amazonaws.com/capstone:latest
            
            
            #echo "updating AWS ECS service..."
            #aws ecs update-service --cluster capstone-cluster --service react-sv --force-new-deployment --no-cli-pager
            #echo "Done!"

  # Creation of Cluster        
  create-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
        default: clustername
    steps:
      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
              echo "eksctl is already installed"
              exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" \
              | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
              SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''
      - aws-eks/create-cluster:
          cluster-name: capstone-cluster
          node-type: t3.medium

# Deployment of the application
  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      aws-region:
        description: |
          AWS region
        type: string
        default: ""
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: << parameters.aws-region >>
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deployment.yaml
          resource-name: deployment/capstone

workflows:
  default:
    jobs:
      - build-app
      - lint-app:
          requires: [build-app]
      - lint-docker:
          requires: [build-app]
      - test-app:
          requires: [build-app]
      - push-app-to-docker:
          requires: [test-app,lint-docker,lint-app]
          filters:
            branches:
              only: [main]
      - create-cluster:
          requires: [push-app-to-docker]
      - create-deployment:
          requires: [create-cluster]